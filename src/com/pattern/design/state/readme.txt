状态模式:
允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。

糖果机状态模式实现：
1、首先，我们定义一个tate接口。在这个接口内，糖果机的每个动作都有一个对应的方法。
2、然后为机器中的每个状态实现状态类，这些类将负责在对应的状态下进行机器的行为。
3、最后，我们要摆脱旧的条件代码，取而代之的方式是，将动作委托到状态类。

1、将梅每个状态的行为局部化到它自己的类
2、将容易产生问题的if语句删除，以方便日后的维护。
3、让每一个状态“对修改关闭”。让糖果机“对扩展开放”，因为可以加入新的状态类。

状态模式允许一个对象基于内部状态而拥有不同的行为。
和程序状态机(PSM)不同，状态模式用类代表状态。
Context会将行为委托给当前状态对象。
通过将每个状态封装进一个类，我们把以后需要做的任何改变局部化了。
状态模式和策略模式有相同的类图，但是它们的意图不同。
策略模式通常会用行为或算法来配置Cantext类。
状态摸式允许Context随着状态的改变而改变行为。
状态转换可以由state类或Context类控制。
使用状态模式通常会导致设计中类的数目大量增加。
状态类可以被多个Context实例共享。

详见代码
















