复合模式：
指一群摸式被结合起来使用、以解决【一般】性问题

使用用模式时必须要考虑到这么做是否有意义。绝对不能为了使用模式而使用模式。


MVC：
视图：用来呈现模型，视图通常直接从模型中取得它需要显示的状态与数据；
控制器：取得用户的输入并解读其对模型的意思；
模型：模型持有所有的数据、状态和程序逻辑。模型没有注意到视图和控制器，虽然它提供了操作和检索状态的接口，并发送状态改变通知给观察者。

MVC之间关系：
你是用户一一你和视图交互。
视图是模型的窗口。当你对视图做一些事时（比方说，按下“播放”按钮）.视图就告诉控制器你做了什么。控制器会负责处理。

控制器要求模型改变状态。
控制器解读你的动作。如果你按某个按钮，控制器会理解这个动作的意义，并告知模型如何做出对应的动作。

控制器也可能要求视图做改变。
当控制器从视图接收到某一动作，结果可能是它也需要告诉视图改变其结果。比方说，控制器可以将界面上的某些按钮或菜单项变成有效或无效。

当模型状态改变时。模型会通知视图。
不管是你做了某些动作(比方说按下按钮)还是内部有了某些改变(比方说播放清单的下一首歌开始)，只要当模型内的东西改变时，模型都会通知视图它的状态改变了。

视图向模型询问状态。
视图直接从模型取得它显示的状态。比方说、当模型通知视图新歌开始播放，视图向模型询问歌名井显示出来。当控制器请求视图改变时，视图也可能向模型询问某些状态。

说明：
1、在某些设计中，控制器会向模型注册，模型一有改变就通知控制器，当模型直接影响到用户界面时，就会这么做。比方说，模型内的某些状态可以支配界面的某些项目变成有效或无效，如果这样，要求视图更新相应显示其实就是控制器的事。
2、视图和控制器合并，1、会让视图的代码变得更复杂，因为这样一来视图就有两个责任，不但要管理用户界面。还要处理如何控制摸型的逻辑。2，这么做将造成模型和视图之间紧藕合、如果你想用此视图来处理其他模型，根本不可能。
   控制器把逻辑从视图中分离，让模型和视图之间解藕。通过保持控制器和视图之间松耦合。设计更有弹性而且容易扩展，足以容纳以后的改变。


MVC中的模式：
模型利用”观察者”让控制器和视图可以随最新的状态改变而更新。另一方而，视图和控制器则实现“策略模式”。控制器是视图的行为，如果你希望有不同的行为，可以直接换一个控制器。视图内部使用组合模式来管理窗口、按钮以及其他显示组件。

模型：观察者模式
模型实现了观察者模式。当状态改变时，相关对象将持续更新。使用观察者模式。可以让模型完全独立于视图和控制器。同一个模型可以使用不同的视图 ,甚至可以同时使用多个视图。
视图：组合模式
显示包括窗口、面板、按钮、文本标签等。每个显示组件如果不是组合节点(例如窗口)，就是叶子节点(例如按钮)。当控制器告诉视图更新时，只需告诉视图最顶层的组件即可，组件会处理其他的事。
控制器：策略
视图和控制器实现了经典的策略模式:视图是一个对象，可以被调整使用不同的策略，而控制器提供了策略。视图只关心系统中可视的部分。对任何界面行为都委托给控制器处理。使用策略摸式也可以让视图和模型之的关系解偶，因为控制器负责和模掣交互来传递用户的请求求。对于工作是怎么完成的，视图毫不知情。

1、模型对视图和控制器没有依赖；
2、视图只关注表现.控制器关注把用户的输入行为转为模型上的行为；

总结：
1、MVC是复合模式，结合了观察者模式。策略模式和组合模式。
2、模型使用观察者模式，以便观察者更新，同时保持两者之间解耦。
3、控制器是视图的策略，视图可以使用不同的控制器实现。得到不同的行为。
4、视图使用组合模式实现用户界面，用户界面通常组合了嵌套的组件，像面板，框架和按钮。


























